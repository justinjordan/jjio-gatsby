{"data":{"wordpressPost":{"title":"I&#8217;m Stoked About WASM and You Should Be Too","content":"\n<p>When I talk about WASM, I get mixed responses. Sometimes I get, &#8220;Wow, that sounds revolutionary,&#8221; but mostly I just get blank stares and a shrug like they don&#8217;t care. Perhaps they&#8217;re thinking, &#8220;Oh great. Another thing to learn or I&#8217;ll get left behind!&#8221; That&#8217;s how it seems anyway. But I get itâ€”there&#8217;s already a ton of technologies that have come out just in the past couple years, so it&#8217;s easy to understand why some might just pass WASM off as just one more thing to learn. But it not JUST another thing to learn. It&#8217;s a binary format and it&#8217;s about to change the web forever!</p>\n\n\n\n<h3>Dude&#8230; What&#8217;s WASM?</h3>\n\n\n\n<p>WASM is short forÂ <a href=\"https://webassembly.org/\">WebAssembly</a>â€”a new binary format for the web. It&#8217;s merely a file format, or compiler target, which can execute in all major browsers, right now! Currently, languages such as C++ and Rust can be compiled to WASM for production and shipped with your web app to be executed via JavaScript. Because it&#8217;s basically machine code, it&#8217;s very lightweight and it&#8217;s FAST!</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://cms.justinjordan.io/app/uploads/2019/05/wasm-sexpressions-1024x666.png\" alt=\"\" class=\"wp-image-24\" srcset=\"https://cms.justinjordan.io/app/uploads/2019/05/wasm-sexpressions-1024x666.png 1024w, https://cms.justinjordan.io/app/uploads/2019/05/wasm-sexpressions-300x195.png 300w, https://cms.justinjordan.io/app/uploads/2019/05/wasm-sexpressions-768x499.png 768w, https://cms.justinjordan.io/app/uploads/2019/05/wasm-sexpressions.png 1394w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>WASM represented using S-expressions</figcaption></figure>\n\n\n\n<h3>Who&#8217;s it For?</h3>\n\n\n\n<p>If you&#8217;re a web developer like me, you most likely don&#8217;t write lower-level code on a day to day basis. Web devs live in the world of JavaScript, HTML, and CSS, so it&#8217;s not immediately clear how WASM might benefit us. Like, what are we gonna do with it exactly?</p>\n\n\n\n<p>First let me talk about the cool stuff. Some people are going to make games with it! The top two game engines,&nbsp;<a href=\"https://docs.unrealengine.com/en-us/Platforms/HTML5/GettingStarted\">Unreal</a>&nbsp;and&nbsp;<a href=\"https://blogs.unity3d.com/2018/08/15/webassembly-is-here/\">Unity</a>, can already export to web using WebAssembly. So if you&#8217;ve always wanted to make super graphic intense web games, then the future is now! Personally, I&#8217;ve dabbled in game development, but I&#8217;m not really a game developer; however, I&#8217;m eager to see the disruptive advancements that are coming our way.</p>\n\n\n\n<p>As for us web devs, we might not even use WASM directly, but, at the very least, we&#8217;ll use it passively through libraries and frameworks like React and, most likely, webpack. There&#8217;s no official word that these frameworks will utilize WASM that I know of, but there&#8217;s been some&nbsp;<a href=\"https://youtu.be/s2ccNDxRqpo\">speculation</a>&nbsp;that the React team might soon use it to speed up React&#8217;s virtual DOM, which is a huge resource hog, so it could use as much optimization as it can get.</p>\n\n\n\n<h3>Getting Started</h3>\n\n\n\n<p>Good news! All the major browser vendors have already&nbsp;<a href=\"https://blog.mozilla.org/blog/2017/11/13/webassembly-in-browsers/\">rolled out WebAssembly support as of late 2017</a>, so you can ship WASM apps today, no problem! The languages that are production ready for WebAssembly are C++ and Rust, which can be compiled using a toolchain call&nbsp;<a href=\"https://emscripten.org/\">Emscripten</a>. It&#8217;s been around for a while now as it was previously developed for&nbsp;<a href=\"http://asmjs.org/\">ASM.js</a>, the predecessor to WASM, so at this point it&#8217;s fairly well documented and ready to go. And if you&#8217;re concerned about supporting older browsers, you can ship an ASM.js fallback, which is just some super gnarly JavaScriptâ€”open in your text editor at your own risk! The ASM.js file sizes can be huge, but they&#8217;re optimized to run blazing fast.</p>\n\n\n\n<h4>TypeScript to the Rescue</h4>\n\n\n\n<p>If you&#8217;re thinking, &#8220;But I don&#8217;t wanna write websites with C++,&#8221; then don&#8217;t worry. I&#8217;m right there with you! Lucky for us, there&#8217;s a project called&nbsp;<a href=\"https://github.com/AssemblyScript/assemblyscript\">AssemblyScript</a>&nbsp;that I only just learned about while writing this blog, conveniently enough. AssemblyScript simply extends TypeScript with WASM specific types like i32 and i64 (integers) and will automatically codesplit into JS and WASM files, so you don&#8217;t have to get into the nitty gritty of things. Magnificent!</p>\n\n\n\n<p>A team at Google has already used AssemblyScript to build a web-based image compression tool calledÂ <a href=\"https://squoosh.app/\">Squoosh</a>. With it, you can compress images in real-time completely in browser. For more information on it, the developers give a goodÂ <a href=\"https://youtu.be/ipNW6lJHVEs\">talk about it</a>Â and also there&#8217;s aÂ <a href=\"https://youtu.be/S0NQwttnr1I\">YouTube video</a>Â where they explain why WASM was crucial for optimization of the app. They say it kind of had to do with a certain browser that doesn&#8217;t run on Mac. ðŸ˜‰</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://cms.justinjordan.io/app/uploads/2019/05/squoosh-screenshot-1024x793.jpg\" alt=\"\" class=\"wp-image-26\" srcset=\"https://cms.justinjordan.io/app/uploads/2019/05/squoosh-screenshot-1024x793.jpg 1024w, https://cms.justinjordan.io/app/uploads/2019/05/squoosh-screenshot-300x232.jpg 300w, https://cms.justinjordan.io/app/uploads/2019/05/squoosh-screenshot-768x595.jpg 768w, https://cms.justinjordan.io/app/uploads/2019/05/squoosh-screenshot-1568x1215.jpg 1568w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3>Pit Falls</h3>\n\n\n\n<p>A potential downside is that WASM is still very cutting edge. It&#8217;s basically the wild west, so learning resources are sparse. It&#8217;s getting there, but you still might have to do some experimentation and invent your own standards and practices. Good news is that if you strike while the iron&#8217;s hot, you might make a name for yourself as a WASM pioneer.</p>\n\n\n\n<p>The biggest downside is there&#8217;s no access to the DOM, so you can&#8217;t write a pure WebAssembly app. This is being worked on, but at the moment, WASM very much feels like a blackbox that you throw numbers into. However, WebAssembly wasn&#8217;t designed to be a replacement for JS anyway, so maybe it&#8217;s not really a deal breaker. But hopefully soon JavaScript&#8217;s DOM monopoly will be a thing of the past, allowing developers to choose from many different languages for our projects. Call me a dreamer!</p>\n\n\n\n<h3>Conclusion</h3>\n\n\n\n<p>Whether you think you need it or not, you have to admit, WASM is pretty awesome! Undoubtedly, it&#8217;s something to look forward to and get excited about. The web may change a little, but it&#8217;s nothing to fear. WebAssembly may finally bridge the gap between web and native, which is the part that gets me the most giddy. But all in all, things are going to stay mostly the same; however, now we have a shiny new tool for when we need some extra power.</p>\n\n\n\n<h5>Resources</h5>\n\n\n\n<p><a href=\"https://webassembly.org/\">WebAssembly.org: The official WASM website</a></p>\n\n\n\n<p><a href=\"https://squoosh.app/\">Squoosh: Image compression app built with WASM</a></p>\n\n\n\n<p><a href=\"https://youtu.be/ipNW6lJHVEs\">Complex JS-heavy Web Apps, Avoiding the Slow: Talk about Squoosh</a></p>\n\n\n\n<p><a href=\"https://youtu.be/S0NQwttnr1I\">Loop Tiling: Video about Squoosh and AssemblyScript</a></p>\n\n\n\n<p><a href=\"https://blazor.net/\">Blazor: A fullstack web framework for C#</a></p>\n\n\n\n<p><a href=\"https://youtu.be/s2ccNDxRqpo\">React, powered by WebAssembly: Talk by Jay Phelps</a></p>\n\n\n\n<p><a href=\"https://github.com/AssemblyScript/assemblyscript\">AssemblyScript: Extension of TypeScript with WASM</a></p>\n","date":"2019-03-23T18:00:23.000Z","author":{"name":"Justin Jordan"},"yoast":{"metadesc":"WebAssembly (WASM) is one of the most exciting advancements in web technology since perhaps HTML5. It's about to make the internet faster and could completely blur the line between web and native. If it scares you, it shouldn't. WebAssembly is amazing!"},"featured_media":{"localFile":{"childImageSharp":{"original":{"src":"/static/wasm-square-60448dd6e618d57e443d704332d0adf7.png"}}}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a03457fc-92d0-5357-a350-fbd262a5bd5c"}}